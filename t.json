{
	"initMain": {
		"prefix": "im",
		"body": [
			"namespace /* Your Namespace */",
			"{",
			"\t/// <summary>",
			"\t/// Interaction logic for App.xaml",
			"\t/// </summary>",
			"\tpublic partial class App : Application",
			"\t{",
			"\t\tprivate IServiceProvider _serviceProvider;",
			"\t\tprivate IConfiguration _configuration;",
			"\t\tpublic App()",
			"\t\t{",
			"\t\t\tvar _configurationBuilder = new ConfigurationBuilder()",
			"\t\t\t\t.SetBasePath(Directory.GetCurrentDirectory())",
			"\t\t\t\t.AddJsonFile(\"appsettings.json\");",
			"",
			"\t\t\t_configuration = _configurationBuilder.Build();",
			"",
			"\t\t\tvar services = new ServiceCollection();",
			"",
			"\t\t\tservices.AddTransient<LogInView>();",
			"",
			"\t\t\tservices.AddTransient<LogInViewModel>();",
			"",
			"\t\t\tservices.AddSingleton<IConfiguration>(_configuration);",
			"",
			"\t\t\tservices.AddScoped<IViewsManager, ViewsManager>();",
			"\t\t\tservices.AddScoped<IAuthorizationService, AuthorizationService>();",
			"",
			"\t\t\tservices.AddDbContext<DatabaseContext>(options => options.UseSqlServer(_configuration.GetConnectionString(\"MSSQL\")));",
			"",
			"\t\t\t_serviceProvider = services.BuildServiceProvider();",
			"\t\t}",
			"",
			"\t\tprotected override void OnStartup(StartupEventArgs e)",
			"\t\t{",
			"\t\t\tvar viewsManager = _serviceProvider.GetRequiredService<IViewsManager>();",
			"\t\t\tvar dataContext = _serviceProvider.GetRequiredService<LogInViewModel>();",
			"",
			"\t\t\tviewsManager.Open<LogInView>(dataContext);",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"initViewsManagerService": {
		"prefix": "ivms",
		"body": [
			"using Microsoft.Extensions.DependencyInjection;",
			"using System.Windows;",
			"",
			"public class ViewsManager : IViewsManager",
			"{",
			"\tprivate IServiceProvider _serviceProvider;",
			"",
			"\tpublic ViewsManager(IServiceProvider serviceProvider)",
			"\t{",
			"\t\t_serviceProvider = serviceProvider;",
			"\t}",
			"",
			"\tprivate Window _window;",
			"\tpublic Window Current { get => _window; }",
			"",
			"\tpublic void Open<TView>(object? dataContext = null) where TView : Window",
			"\t{",
			"\t\tvar window = _serviceProvider.GetRequiredService<TView>();",
			"",
			"\t\tCurrent?.Close();",
			"\t\t_window = window;",
			"",
			"\t\tif (dataContext is not null) ",
			"\t\t\t_window.DataContext = dataContext;",
			"",
			"\t\t_window.Show();",
			"\t}",
			"}"
		]
	},
	"initAuthService": {
		"prefix": "ias",
		"body": [
			"public class AuthorizationService : IAuthorizationService",
			"{",
			"\tprivate readonly DatabaseContext _context;",
			"",
			"\tpublic AuthorizationService(DatabaseContext context)",
			"\t{",
			"\t\t_context = context;",
			"\t}",
			"",
			"\tprivate UserModel _currentUser = null!;",
			"\tpublic UserModel CurrentUser { get => _currentUser; }",
			"",
			"\tpublic async Task SignIn(string login, string password)",
			"\t{",
			"\t\tvar user = await _context.Users.FirstOrDefaultAsync(u => u.Login == login);",
			"",
			"\t\tif (user is not null)",
			"\t\t{",
			"\t\t\tthrow new Exception(\"This username is already taken\");",
			"\t\t}",
			"",
			"\t\t_context.Users.Add(new UserModel",
			"\t\t{",
			"\t\t\tId = _context.Users.Max(u => u.Id) + 1,",
			"\t\t\tLogin = login,",
			"\t\t\tPassword = password,",
			"\t\t\tRoleId = 2,",
			"\t\t});",
			"\t\t_context.SaveChanges();",
			"\t}",
			"",
			"\tpublic async Task LogIn(string login, string password)",
			"\t{",
			"\t\tvar user = await _context.Users.FirstOrDefaultAsync(u => u.Login == login && u.Password == password);",
			"",
			"\t\tif (user is null)",
			"\t\t\tthrow new Exception(\"Invalid username or password\");",
			"",
			"\t\t_currentUser = user;",
			"\t}",
			"",
			"\tpublic void LogOut() => _currentUser = null!;",
			"}"
		]
	},
	"initBaseViewModel": {
		"prefix": "ibvm",
		"body": [
			"using System.ComponentModel;",
			"using System.Runtime.CompilerServices;",
			"",
			"namespace /* Your Namespace */",
			"{",
			"\tpublic class BaseViewModel : INotifyPropertyChanged",
			"\t{",
			"\t\tpublic event PropertyChangedEventHandler? PropertyChanged;",
			"\t\tprotected virtual void OnPropertyChanged([CallerMemberName] string propertyName = \"\")",
			"\t\t{",
			"\t\t\tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"initLoginViewModel": {
		"prefix": "ilvm",
		"body": [
			"namespace /* Your Namespace */",
			"{",
			"\tpublic class LogInViewModel : BaseViewModel",
			"\t{",
			"\t\tprivate readonly IServiceProvider _serviceProvider;",
			"\t\tprivate readonly IAuthorizationService _authorizationService;",
			"\t\tprivate readonly IViewsManager _viewsManager;",
			"",
			"\t\tprivate string _login = string.Empty;",
			"\t\tpublic string Login",
			"\t\t{",
			"\t\t\tget => _login;",
			"\t\t\tset",
			"\t\t\t{",
			"\t\t\t\t_login = value;",
			"\t\t\t\tOnPropertyChanged();",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tprivate string _password = string.Empty;",
			"\t\tpublic string Password",
			"\t\t{",
			"\t\t\tget => _password;",
			"\t\t\tset",
			"\t\t\t{",
			"\t\t\t\t_password = value;",
			"\t\t\t\tOnPropertyChanged();",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tpublic ICommand LogIn",
			"\t\t{",
			"\t\t\tget => new RelayCommand(",
			"\t\t\t\texecute: (o) =>",
			"\t\t\t\t{",
			"\t\t\t\t\ttry",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\t_authorizationService.LogIn(Login, Password);",
			"",
			"\t\t\t\t\t\tvar dataContext = _serviceProvider.GetRequiredService<UserInfoViewModel>();",
			"\t\t\t\t\t\t_viewsManager.Open<UserInfoView>(dataContext);",
			"\t\t\t\t\t}",
			"\t\t\t\t\tcatch (Exception e)",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\tMessageBox.Show(e.Message);",
			"\t\t\t\t\t}",
			"\t\t\t\t},",
			"\t\t\t\tcanExecute: (o) => !string.IsNullOrEmpty(Login) && !string.IsNullOrEmpty(Password)",
			"\t\t\t);",
			"\t\t}",
			"",
			"\t\tpublic ICommand OpenSignIn",
			"\t\t{",
			"\t\t\tget => new RelayCommand(",
			"\t\t\t\texecute: (o) =>",
			"\t\t\t\t{",
			"\t\t\t\t\tvar dataContext = _serviceProvider.GetRequiredService<SignInViewModel>();",
			"\t\t\t\t\t_viewsManager.Open<SignInView>(dataContext);",
			"\t\t\t\t}",
			"\t\t\t);",
			"\t\t}",
			"",
			"\t\tpublic LogInViewModel(IServiceProvider serviceProvider,IAuthorizationService authorizationService, IViewsManager viewsManager)",
			"\t\t{",
			"\t\t\t_serviceProvider = serviceProvider;",
			"\t\t\t_authorizationService = authorizationService;",
			"\t\t\t_viewsManager = viewsManager;",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"initLoginView": {
		"prefix": "ilv",
		"body": [
			"<Window x:Class=\"lab_7.LogInView\"",
			"\t\txmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"",
			"\t\txmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"",
			"\t\txmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"",
			"\t\txmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"",
			"\t\txmlns:local=\"clr-namespace:lab_7\"",
			"\t\tmc:Ignorable=\"d\"",
			"\t\tTitle=\"Log In\" Height=\"450\" Width=\"450\">",
			"\t<Grid>",
			"\t\t",
			"\t\t<TextBlock x:Name=\"tbckLogin\" HorizontalAlignment=\"Center\" Margin=\"0,83,0,0\" TextWrapping=\"Wrap\" Text=\"Login\" VerticalAlignment=\"Top\" FontSize=\"20\"/>",
			"\t\t<TextBox x:Name=\"tbLogin\"  HorizontalAlignment=\"Center\" Margin=\"0,110,0,0\" TextWrapping=\"Wrap\" Text=\"{Binding Login, UpdateSourceTrigger=PropertyChanged}\" VerticalAlignment=\"Top\" Width=\"240\" FontSize=\"16\" BorderThickness=\"10,1,1,1\"/>",
			"",
			"\t\t<TextBlock x:Name=\"tbckPassword\" HorizontalAlignment=\"Center\" Margin=\"0,190,0,0\" TextWrapping=\"Wrap\" Text=\"Password\" VerticalAlignment=\"Top\" FontSize=\"20\"/>",
			"\t\t<TextBox x:Name=\"tbPassword\"  HorizontalAlignment=\"Center\" Margin=\"0,217,0,0\" TextWrapping=\"Wrap\" Text=\"{Binding Password, UpdateSourceTrigger=PropertyChanged}\" VerticalAlignment=\"Top\" Width=\"240\" FontSize=\"16\" BorderThickness=\"10,1,1,1\"/>",
			"",
			"\t\t<Button x:Name=\"btnLogIn\" Content=\"Log In\" HorizontalAlignment=\"Center\" Margin=\"0,274,0,0\" VerticalAlignment=\"Top\" Width=\"80\" Background=\"#FFABADB3\" Command=\"{Binding LogIn}\" />",
			"\t\t<Button x:Name=\"btnSignIn\" Content=\"Sign In\" HorizontalAlignment=\"Center\" Margin=\"0,324,0,0\" VerticalAlignment=\"Top\" Width=\"60\" Background=\"#FFECECEC\" Command=\"{Binding OpenSignIn}\" />",
			"",
			"\t</Grid>",
			"</Window>"
		]
	},
	"initRelayCommand": {
		"prefix": "irc",
		"body": [
			"using System.Windows.Input;",
			"",
			"public class RelayCommand : ICommand",
			"{",
			"\tprivate Action<object> execute;",
			"\tprivate Func<object, bool> canExecute;",
			"",
			"\tpublic event EventHandler? CanExecuteChanged",
			"\t{",
			"\t\tadd { CommandManager.RequerySuggested += value; }",
			"\t\tremove { CommandManager.RequerySuggested -= value; }",
			"\t}",
			"",
			"\tpublic RelayCommand(Action<object> execute, Func<object, bool> canExecute = null!)",
			"\t{",
			"\t\tthis.execute = execute;",
			"\t\tthis.canExecute = canExecute;",
			"\t}",
			"",
			"\tpublic bool CanExecute(object parameter) => this.canExecute == null || this.canExecute(parameter);",
			"",
			"\tpublic void Execute(object parameter) => this.execute(parameter);",
			"}"
		]
	},
	"initCrudService": {
		"prefix": "ics",
		"body": [
			"using DemoExam.App.Context;",
			"using DemoExam.App.Services.Interfaces;",
			"using Microsoft.EntityFrameworkCore;",
			"",
			"namespace DemoExam.App.Services.Implementations",
			"{",
			"\tpublic class CRUDService<T> : ICRUDService<T>",
			"\t\twhere T : class",
			"\t{",
			"\t\tprivate readonly DemoExamContext _context;",
			"",
			"\t\tpublic CRUDService(DemoExamContext context)",
			"\t\t{",
			"\t\t\t_context = context;",
			"\t\t}",
			"",
			"\t\tpublic async Task<IEnumerable<T>> GetAll()",
			"\t\t{",
			"\t\t\treturn await _context.Set<T>().ToListAsync();",
			"\t\t}",
			"",
			"\t\tpublic async Task<int> Create(T data)",
			"\t\t{",
			"\t\t\tawait _context.Set<T>().AddAsync(data);",
			"\t\t\tawait _context.SaveChangesAsync();",
			"",
			"\t\t\tvar clientId = typeof(T).GetProperty(\"Id\");",
			"",
			"\t\t\treturn (int)clientId.GetValue(data);",
			"\t\t}",
			"",
			"\t\tpublic async Task Update(T data)",
			"\t\t{",
			"\t\t\t_context.Set<T>().Update(data);",
			"\t\t\tawait _context.SaveChangesAsync();",
			"\t\t}",
			"",
			"\t\tpublic async Task<Boolean> Delete(int id)",
			"\t\t{",
			"\t\t\tvar entity = await _context.Set<T>().FindAsync(id);",
			"\t\t\tif (entity != null)",
			"\t\t\t{",
			"\t\t\t\t_context.Set<T>().Remove(entity);",
			"\t\t\t\tawait _context.SaveChangesAsync();",
			"",
			"\t\t\t\treturn true;",
			"\t\t\t}",
			"\t\t\telse throw new Exception(\"Entity not found\");",
			"\t\t}",
			"\t}",
			"}",
			""
		]
	},
	"initAuthServiceTests": {
		"prefix": "iast",
		"body": [
			"using DemoExam.App.Context;",
			"",
			"namespace DemoExam.Tests",
			"{",
			"\t[TestClass]",
			"\tpublic class AuthorizationServiceTests",
			"\t{",
			"\t\t/// <summary>",
			"\t\t/// #1: Авторизация должна произойти успешно и положить данные в CurrentUser",
			"\t\t/// </summary>",
			"\t\t[TestMethod]",
			"\t\tpublic async Task Login_ShouldSetDataToCurrentUser()",
			"\t\t{",
			"\t\t\tconst string employeeLogin = \"YereminaKD\";",
			"\t\t\tconst string employeePassword = \"28YLXVpqJ_7_8BT\";",
			"",
			"\t\t\tDemoExamContext context = new DemoExamContext().CreateTestContext();",
			"\t\t\tvar _authorizationservice = new AuthorizationService(context);",
			"",
			"\t\t\tawait _authorizationservice.Login(employeeLogin, employeePassword);",
			"",
			"\t\t\tAssert.IsNotNull(_authorizationservice.CurrentUser);",
			"\t\t}",
			"",
			"\t\t/// <summary>",
			"\t\t/// #2: Система выбрасывает ошибку, так как пользователя с таким логином и паролем нет в системе",
			"\t\t/// </summary>",
			"\t\t[TestMethod]",
			"\t\tpublic async Task Login_ShouldThrowException()",
			"\t\t{",
			"\t\t\tDemoExamContext context = new DemoExamContext().CreateTestContext();",
			"\t\t\tvar _authorizationservice = new AuthorizationService(context);",
			"",
			"\t\t\tawait Assert.ThrowsExceptionAsync<Exception>(() => _authorizationservice.Login(\"foo\", \"bar\"));",
			"\t\t}",
			"",
			"\t\t/// <summary>",
			"\t\t/// #3: Успешный выход из системы и очистка данных о пользователе в CurrentUser",
			"\t\t/// </summary>",
			"\t\t[TestMethod]",
			"\t\tpublic async Task Logout_ShouldClearDataInCurrentUser()",
			"\t\t{",
			"\t\t\tconst string employeeLogin = \"YereminaKD\";",
			"\t\t\tconst string employeePassword = \"28YLXVpqJ_7_8BT\";",
			"",
			"\t\t\tDemoExamContext context = new DemoExamContext().CreateTestContext();",
			"\t\t\tvar _authorizationservice = new AuthorizationService(context);",
			"",
			"\t\t\tawait _authorizationservice.Login(employeeLogin, employeePassword);",
			"\t\t\tAssert.IsNotNull(_authorizationservice.CurrentUser);",
			"",
			"\t\t\t_authorizationservice.Logout();",
			"",
			"\t\t\tAssert.IsNull(_authorizationservice.CurrentUser);",
			"\t\t}",
			"",
			"\t\t/// <summary>",
			"\t\t/// #4: Пользователь не является администратором",
			"\t\t/// </summary>",
			"\t\t[TestMethod]",
			"\t\tpublic async Task IsAdmin_ShouldReturnFalse()",
			"\t\t{",
			"\t\t\tconst string employeeLogin = \"YereminaKD\";",
			"\t\t\tconst string employeePassword = \"28YLXVpqJ_7_8BT\";",
			"",
			"\t\t\tDemoExamContext context = new DemoExamContext().CreateTestContext();",
			"\t\t\tvar _authorizationservice = new AuthorizationService(context);",
			"",
			"\t\t\tawait _authorizationservice.Login(employeeLogin, employeePassword);",
			"\t\t\tAssert.IsNotNull(_authorizationservice.CurrentUser);",
			"\t\t\tAssert.IsFalse(_authorizationservice.IsAdmin());",
			"\t\t}",
			"",
			"\t\t/// <summary>",
			"\t\t/// #5: Пользователь является администратором",
			"\t\t/// </summary>",
			"\t\t[TestMethod]",
			"\t\tpublic async Task IsAdmin_ShouldReturnTrue()",
			"\t\t{",
			"\t\t\tconst string employeeLogin = \"IgnatovAI\";",
			"\t\t\tconst string employeePassword = \"dxARZCsYQT1AF-D\";",
			"",
			"\t\t\tDemoExamContext context = new DemoExamContext().CreateTestContext();",
			"\t\t\tvar _authorizationservice = new AuthorizationService(context);",
			"",
			"\t\t\tawait _authorizationservice.Login(employeeLogin, employeePassword);",
			"\t\t\tAssert.IsNotNull(_authorizationservice.CurrentUser);",
			"\t\t\tAssert.IsTrue(_authorizationservice.IsAdmin());",
			"\t\t}",
			"\t}",
			"}",
			""
		]
	},
    "connection": "Scaffold-DbContext \"Server=(local);Database=demoexam;TrustServerCertificate=True;Trusted_Connection=True;MultipleActiveResultSets=true\" Microsoft.EntityFrameworkCore.SqlServer",
	"deps": "microsoft.extension + .configuration + .json + .dependecyInjection / efcore + .sqlserver + .tools + .designer"
}
